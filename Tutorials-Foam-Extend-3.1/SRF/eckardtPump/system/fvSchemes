/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scheme1		upwind; //vanLeer;
scheme1V	upwind; //vanLeerV;

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
    default         none;
    div(U,p)   	    Gauss $scheme1;

    div((-devRhoReff&Urel))	  Gauss linear;
    div((muEff*dev2(grad(Urel).T()))) Gauss linear;
    
    //momentum equation
    div(phiNeg,Urel)	Gauss $scheme1V;
    div(phiPos,Urel)	Gauss $scheme1V;

    //energy equation
    div(phi,i)   Gauss $scheme1;
    div(phiNeg,i)	Gauss $scheme1;
    div(phiPos,i)	Gauss $scheme1;

    div(phiNeg,h)	Gauss $scheme1;
    div(phiPos,h)	Gauss $scheme1;
    div(phiNeg,Hr)	Gauss $scheme1;
    div(phiPos,Hr)	Gauss $scheme1;
    div(phiNeg,Er)	Gauss $scheme1;
    div(phiPos,Er)	Gauss $scheme1;

    //continuity equation
    div(phid_neg,p)	Gauss $scheme1;
    div(phid_pos,p)	Gauss $scheme1;
    
    div(phi,epsilon)   Gauss $scheme1;
    div(phi,omega)   Gauss $scheme1;
    div(phi,k)	       Gauss $scheme1;
}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         none;
    
    interpolate(rho)		linear;
    interpolate((rho*Urel))	linear;
    
    reconstruct(psi)		$scheme1;
    reconstruct(p)		$scheme1;
    reconstruct(Urel)		$scheme1V;
    reconstruct(U)		$scheme1V;
    reconstruct(Dp)		$scheme1;
}

snGradSchemes
{
    default         corrected;
}

fluxRequired
{
    default	none;
    p;
}

// ************************************************************************* //
